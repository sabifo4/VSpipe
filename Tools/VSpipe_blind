#!/bin/bash
## This script is thought to be used to run a virtual screening using
## AutoDock 4.2 or AutoDock Vina.
##
## Feel free to modify it. However, make sure you keep track of all your 
## modifications and do not delete any original line of this script. 
## Simply, please comment the line you want to modify and add your 
## modification/implementation below.
##
## If you have any doubts about how to run it or you want to give your
## feedback, please contact Sandra Alvarez-Carretero at the following
## e-mail address: <sandra.ac93@gmail.com>
##
## Happy docking! :)

## This block will be run only once in the beginning of each working directory
if [[ ! -f "variables.txt" ]]
then
	counter=1
	## Path where the files of AutoDock are
	while [[ ! -f $path_dock_files/prepare_dpf4.py || ! -f $path_dock_files/prepare_gpf4.py || ! -f $path_dock_files/prepare_ligand4.py || ! -f $path_dock_files/prepare_receptor4.py || -d "MolKit" ]]
	do
		printf "\nPlease type the full path where the prepare_dpf4.py, prepare_gpf4.py,"
		printf "\nprepare_ligand4.py, and prepare_receptor4.py are. After that, please"
		printf "\npress [ENTER]: \n"
		read path_dock_files
	done
	## Path where the scripts of the pipeline are
	path_other_files=${0%/*}/
	### IMPLEMENTATION-04/11/16-SA- Getting the full path to the folder containing all the libraries with the correspongin pre-filtered ligands ###
	while [[ ! $decision =~ ^[Yy][Ee][Ss]$|^[Nn][Oo]$ ]]
	do
		printf "\nIf you have prepared before the ligands you want to use, please type \"yes\" and,"
		printf "\nafter that, please press [ENTER]. Remember that then you must have"
		printf "\nin this working directory the folder where your ligands were prepared,"
		printf "\ne.g. \"ligands\"."
		printf "\nIf you have to prepare your ligands, please type \"no\" and, after that, please"
		printf "\npress [ENTER]: \n"
		read decision
	done
	
	if [[ $decision =~ ^[Yy][Ee][Ss]$ ]]
	then
		while [[ ! -d $path_prep_libaries ]]
		do
			printf "\nPlease type the full path to the directory where the ligands already filtered"
			printf "\nwere saved. Do not include the \"/\" after typing the name of this"
			printf "\nfolder in the path."
			printf "\nFor instance, you MUST type \"my_home_directory/my_folder_with_libraries\""
			printf "\nbut you MUST NOT type \"my_home_directory/my_folder_with_libraries/\"."
			printf "\nE.g. You might have already prepared the ligands with the library"
			printf "\n     Maybridge_Pre-Fragment-NCO. Then you should have something like:\n"
			printf "\n     path_to_filtered_lib/Maybridge_Pre-Fragment-NCO_filtered/pdb"
			printf "\n     path_to_filtered_lib/Maybridge_Pre-Fragment-NCO_filtered/pdbqt"
			printf "\n     path_to_filtered_lib/Maybridge_Pre-Fragment-NCO_filtered/sdf"
			printf "\n "
			printf "\nIn this case, you should type: path_to_filtered_lib/Maybridge_Pre-Fragment-NCO_filtered"
			printf "\nAfter that, please press [ENTER]: \n"
			read path_prep_libaries
		done
		## Path where the libraries with the filtered ligands are saved
		printf "\nRemember that the path to the folder containing the pre-filtered ligands is: \n"
		echo $path_prep_libaries
		while [[ ! $is_really_dir =~ ^[Yy][Ee][Ss]$|^[Nn][Oo]$ ]]
		do
			printf "Is this the correct path to the folder?  \n"
			read is_really_dir
		done
		while [[ ! $is_really_dir =~ ^[Yy][Ee][Ss]$ ]]
		do 
			printf "\nPlease type the correct path to the folder and, after that, please press"
			printf "\n[ENTER]: \n"
			read path_prep_libaries
			printf "\nThe path to the folder containing the pre-filtered ligands is now: \n"
			echo $path_prep_libaries
			printf "Is this the correct path to the folder?  \n"
			read is_really_dir
		done
	elif [[ $decision =~ ^[Nn][Oo]$ ]]
	then
		keep_receptor=$(echo "no")
	fi
	###############################################################################################################################################
	# 171117 - Asking if you want to keep the receptor or not when you have prefitlered ligands
	#######
	if [[ $decision =~ ^[Yy][Ee][Ss]$ ]]
	then
		while [[ ! $keep_receptor =~ ^[Yy][Ee][Ss]$|^[Nn][Oo]$ ]]
		do
			printf "\nYou are using your pre-filtered ligands. However, do you want"
			printf "\nto reuse also your previously prepared receptor? \n"
			read keep_receptor
		done
		if [[ $keep_receptor =~ ^[Yy][Ee][Ss]$ ]]
		then
			while [[ ! $rep_dir =~ ^[A-Za-z]+$ ]]
			do 
				printf "\nPlease type the name of the directory in which you have"
				printf "\nthe previously prepared receptor. After that, please"
				printf "\npress [ENTER]: \n"
				read rep_dir
			done
			while [[ ! ${receptor##*.} =~ ^pdb$ || ! -f $rep_dir/$receptor || $receptor == "" ]]
			do
				printf "\nNow, please type the name of the the receptor (PDB file) that you"
				printf "\npreviously prepared and that should be already in the directory"
				printf "\n\"$rep_dir\". If it is not saved there, please move it there."
				printf "\nOnce everything is done, please press [ENTER]: \n"
				read receptor
			done
		fi
	fi
	if [[ $keep_receptor =~ ^[Nn][Oo]$ ]]
	then
		while [[ ! $rep_dir =~ ^[A-Za-z]+$ ]]
		do
			printf "\nPlease type a name for the directory where all the files concerning"
			printf "\nthe receptor will be. After that, please press [ENTER]: \n"
			read rep_dir
		done
		mkdir $rep_dir
		while [[ ! ${receptor##*.} =~ ^pdb$ || ! -f $rep_dir/$receptor || $receptor == "" ]]
		do
			printf "\nPlease type the name of the PDB file for the receptor and upload"
			printf "\nit in the directory $rep_dir. After that, please press"
			printf "\n[ENTER]: \n"
			read receptor
		done
	###############MODIFICATION-May15-SA-Uploading now the sample.gpf##########################
		while [[ ! -f $rep_dir/sample.gpf ]]
		do
			printf "\nPlease define the grid box and manually save it as \"sample.gpf\" file"
			printf "\nunder the directory $rep_dir. After that, please"
			printf "\npress [ENTER]: \n"
			read gpf
		done
    ###############MODIFICATION-Feb15-SA-Selecting keeping metal ions##########################
	#####Before modification:
	#while [[ ! $ch_num  =~ ^1$|^2$ ]]
	#do
	#	printf "\nPlease select if you want to extract only the first chain from the"
	#	printf "\n$receptor. If you choose not to do it then please make sure the file"
	#	printf "\nis in the correct form. Please type the corresponding number from the"
	#	printf "\nfollowing options: 1)Yes 2)No and then press [ENTER]: "
	#	read ch_num
	#done
	#if [[ $ch_num == 1 ]]
	#then
	#	a="$(python $path_other_files'clean_protein.py' $rep_dir/$receptor)"
	#	printf "\nExtracting the first chain from the receptor's pdb file and save\nit as $a."
	#	r_name=$a
	#else
	#	r_name=$rep_dir/$receptor
	#fi
    	while [[ ! $ch_num  =~ ^[1]$|^[2]$|^[A-Z][A-Z]$ ]]
		do
			printf "\nPlease select if you want to extract only the first chain from the"
        	printf "\n$receptor, if you do not want to extract it or, if your protein is"
        	printf "\na metalloproteinase, if you want to keep the metal ion in the active"
        	printf "\nsite. If you choose not to extract the chain, then please make"
        	printf "\nsure the file is in the correct form.\n"
        	printf "\nPlease type 1, 2, or X from the following options:"
        	printf "\n1)Extracting the first chain without keeping the metal ion"
        	printf "\n2)Not extracting the first chain (keep the file by default)"
        	printf "\nX)Extracting the first chain and keeping the metal ion, where X is"
        	printf "\n  the name of the metal ion you want to keep. Be sure you type it"
        	printf "\n  in capital letters and in the PDB format (i.e. ZN, P, FE...)\n"
        	printf "\nAfter that, please press [ENTER]: \n"
			read ch_num
		done
		if [[ $ch_num == 1 ]]
		then
			a="$(python $path_other_files'clean_protein.py' $rep_dir/$receptor)"
			printf "\nExtracting the first chain from the receptor's pdb file and saving\nit as $a.\n"
			r_name=$a
		elif [[ $ch_num == 2 ]]
		then
			r_name=$rep_dir/$receptor
			printf "\nKeeping the pdb file by default and saving\nit as $rep_dir/$receptor.\n"
    	else
       		a="$(python $path_other_files'adding_metal_ion.py' $rep_dir/$receptor $ch_num)"
			printf "\nExtracting the first chain from the receptor's pdb file, keeping the $ch_num ion," 
			printf "\nand saving it as $a.\n"
			r_name=$a
		fi
	###################################################################################################	
		printf "\nRemoving water residues."
		printf "\nAdding hydrogens in the receptor's pdb file."
		printf "\nMerging charges and removing non-polar hydrogens." 
		printf "\nSaving the receptor as $rep_dir/${receptor%.*}.pdbqt. \n\n"
		python $path_dock_files'/prepare_receptor4.py' -r $r_name -o $rep_dir/${receptor%.*}.pdbqt -A hydrogens -U nphs waters
	##########MODIFICATION-Feb15-SA-Adding the correct charge of the metal ion to the pdbqt file########################
    #Before: python $path_other_files'receptor_pdbqt_correction.py' $rep_dir/${receptor%.*}
    #Now:
    	while [[ ! $ch_metal =~ ^[Nn][Oo]$|^([+][0-9][.][0-9][0-9][0-9])$|^([-][0-9][.][0-9][0-9][0-9])$ ]]
    	do
    		printf "\n\nIf you chose to keep the metal ion, now set its charge in order to"
	   		printf "\nmodify the $rep_dir/${receptor%.*}.pdbqt file. Type the charge"
	   		printf "\nin this way: '+X.YZW' or '-X.YWZ' (e.g. +2.000). After that, please press"
	   		printf "\n[ENTER]. If you did not keep a metal ion, then type 'no' and,"
	   		printf "\nafter that, please press [ENTER]: \n"
	   		read ch_metal
    	done
		printf "\nCorrecting the $rep_dir/${receptor%.*}.pdbqt file in case it has errors."
    	if [[ $ch_metal =~ ^[Nn][Oo]$ ]]
    	then
       		python $path_other_files'receptor_pdbqt_correction.py' $rep_dir/${receptor%.*}
    	else
       		python $path_other_files'receptor_pdbqt_correction.py' $rep_dir/${receptor%.*}
       		printf "\nAdding the metal charge to the ion you kept in the $rep_dir/${receptor%.*}.pdbqt file."
       		python $path_other_files'adding_metal_charge.py' $rep_dir/${receptor%.*} $ch_num $ch_metal
    	fi
    #####################################################################################################################
		printf "\nCorrecting the sample.gpf."
	####MODIFICATION-11/5/15-SA-Modifying atom_types in sample.gpf in order to run fine Autogrid###
		python $path_other_files"generating_correct_sample_gpf.py" $rep_dir/ ${receptor%.*} sample.gpf
	###############################################################################################
	fi
	####################################################################1717SAC - Suggesting keeping receptor
	if [[ $decision =~ ^[Nn][Oo]$ ]]
	then
		while [[ ! $lig_dir =~ ^[A-Za-z]+$ ]]
		do
			printf "\n\nPlease type a name for the directory where the files concerning the ligands"
			printf "\nwill be. After that, please press [ENTER]: \n"
			read lig_dir
		done
		mkdir $lig_dir
		ligand="null"
	elif [[ $decision =~ ^[Yy][Ee][Ss]$ ]]
	then
		while [[ ! $lig_dir =~ ^[A-Za-z]+$ ]]
		do
			printf "\n\nPlease type a name for the new directory where the files"
			printf "\nconcerning the pre-filtered ligands will be."
			printf "\nAfter that, please press [ENTER]: \n"
			read lig_dir
		done
		mkdir $lig_dir
		ligand="null"
	fi
	# SANDRA 171117 - Separating when it is pre or not prefiltered
	if [[ ! $decision =~ ^[Yy][Ee][Ss]$ ]]
	then
		while [[ ! $flag =~ ^1$|^2$|^3$ ]]
		do
			printf "\nPlease upload in the $lig_dir directory the PDB or MOL or MOL2"
			printf "\nor SMI or CAN or SDF file/files for the ligand and, after that, please press"
			printf "\n[ENTER]. However, if you do not want to upload your own files and you want"
			printf "\nto use any of the ligand SDF files from public databases provided by VSpipe, please"
			printf "\ntype the corresponding number from one of the following\noptions:"
			printf "\n1) AnalytiConDiscoveryNP.sdf  \n2) ASINEX_BB_v123_SD.sdf \n3) ASINEXSynergy_Fragments.sdf"
			printf "\n4) Chem-diverset.sdf \n5) Chem-Fragment.sdf \n6) Chem-MW-Set-1.sdf \n7) ENAMINEBuilding_Blocks_reduced_price.sdf"
			printf "\n8) ENAMINEfragment_library.sdf \n9) IBScreenNP.sdf \n10) IndofineNaturalProducts.sdf \n11) MAybridge-Building_Blocks_GBP.sdf"
			printf "\n12) Maybridge-Fragment_Collection.sdf \n13) Maybridge_Pre-Fragment-COCl_PFP.sdf \n14) Maybridge_Pre-Fragment-NCO.sdf"
			printf "\n15) Maybridge_Pre-Fragment-SO2Cl.sdf \n16) Maybridge_Ro3_1000_Fragment_Library.sdf \n17) Maybridge_Ro3_500_Fragment_Library.sdf"
			printf "\n18) PrincetonNP.sdf \n19) SpecsNaturalProducts.sdf \n20) ZENOBIA_352fragments.sdf \n21) PTP_database.sdf"
			printf "\nand then please press [ENTER]. "
			printf "\nE.g. If you want to use the Chem-diverset.sdf library, you should type \"1\" \n"
			read ligand
			if [[ $ligand == "" ]]
			then
				if [[ "$(ls -A $lig_dir)" ]]
				then
					for f in ${lig_dir%/*}/*
					do
						posix=$f
						break
					done
					if [[ ${posix##*.} =~ ^pdb$|^mol$|^mol2$ ]]
					then
						flag=1
					elif [[ ${posix##*.} =~ ^smi$|^can$ ]]
					then
						flag=2
					elif [[ ${posix##*.} =~ ^sdf$ ]]
					then
						flag=3
					fi
				else
					flag=0
				fi
		######MODIFICATION-5-5-15-SA-Adding new databases (16/19) #############################################################
			elif [[ $ligand =~ ^1$|^2$|^3$|^4$|^5$|^6$|^7$|^8$|^9$|^10$|^11$|^12$|^13$|^14$|^15$|^16$|^17$|^18$|^19$|^20$|^21$ ]]
		#######################################################################################################################
			then
				flag=3
				libs=("AnalytiConDiscoveryNP.sdf" "ASINEX_BB_v123_SD.sdf" "ASINEXSynergy_Fragments.sdf" "Chem-diverset.sdf" "Chem-Fragment.sdf" "Chem-MW-Set-1.sdf" "ENAMINEBuilding_Blocks_reduced_price.sdf" "ENAMINEfragment_library.sdf" "IBScreenNP.sdf" "IndofineNaturalProducts.sdf" "MAybridge-Building_Blocks_GBP.sdf" "Maybridge-Fragment_Collection.sdf" "Maybridge_Pre-Fragment-COCl_PFP.sdf" "Maybridge_Pre-Fragment-NCO.sdf" "Maybridge_Pre-Fragment-SO2Cl.sdf" "Maybridge_Ro3_1000_Fragment_Library.sdf" "Maybridge_Ro3_500_Fragment_Library.sdf" "PrincetonNP.sdf" "SpecsNaturalProducts.sdf" "ZENOBIA_352fragments.sdf" "PTP_database.sdf")
				printf "\nYou have chosen to use the ${libs[$ligand-1]} file.\n\n"
		#### NEW IMPLEMENTATION-04/11/16-SA- Adding the chance to select a library with the ligands already filtered ####
		#elif [[ $ligand =~ ^y ]]
		#then
		#	flag=3
		#	prep_ligands=$(echo "yes")
		#	num_lib=$(echo $ligand | sed 's/y//' )
		#	libs=("AnalytiConDiscoveryNP.sdf" "ASINEX_BB_v123_SD.sdf" "ASINEXSynergy_Fragments.sdf" "Chem-diverset.sdf" "Chem-Fragment.sdf" "Chem-MW-Set-1.sdf" "ENAMINEBuilding_Blocks_reduced_price.sdf" "ENAMINEfragment_library.sdf" "IBScreenNP.sdf" "IndofineNaturalProducts.sdf" "MAybridge-Building_Blocks_GBP.sdf" "Maybridge-Fragment_Collection.sdf" "Maybridge_Pre-Fragment-COCl_PFP.sdf" "Maybridge_Pre-Fragment-NCO.sdf" "Maybridge_Pre-Fragment-SO2Cl.sdf" "Maybridge_Ro3_1000_Fragment_Library.sdf" "Maybridge_Ro3_500_Fragment_Library.sdf" "PrincetonNP.sdf" "SpecsNaturalProducts.sdf" "ZENOBIA_352fragments.sdf" "PTP_database.sdf")
		#	chosen_lib=$(echo ${libs[$num_lib-1]}) #This is the name of the library chosen 
		#	library_name=$(echo $chosen_lib | sed 's/\..*//')
		#	printf "\nYou have chosen to use the filtered ligands of the library $library_name.\n"
			fi
		#######################################################################################################################
		done
	else
		while [[ ! $flag =~ ^1$|^2$|^3$ ]]
		do
			printf "\nPlease type the number of the library you have already pre-filtered:"
			printf "\n1) AnalytiConDiscoveryNP.sdf  \n2) ASINEX_BB_v123_SD.sdf \n3) ASINEXSynergy_Fragments.sdf"
			printf "\n4) Chem-diverset.sdf \n5) Chem-Fragment.sdf \n6) Chem-MW-Set-1.sdf \n7) ENAMINEBuilding_Blocks_reduced_price.sdf"
			printf "\n8) ENAMINEfragment_library.sdf \n9) IBScreenNP.sdf \n10) IndofineNaturalProducts.sdf \n11) MAybridge-Building_Blocks_GBP.sdf"
			printf "\n12) Maybridge-Fragment_Collection.sdf \n13) Maybridge_Pre-Fragment-COCl_PFP.sdf \n14) Maybridge_Pre-Fragment-NCO.sdf"
			printf "\n15) Maybridge_Pre-Fragment-SO2Cl.sdf \n16) Maybridge_Ro3_1000_Fragment_Library.sdf \n17) Maybridge_Ro3_500_Fragment_Library.sdf"
			printf "\n18) PrincetonNP.sdf \n19) SpecsNaturalProducts.sdf \n20) ZENOBIA_352fragments.sdf \n21) PTP_database.sdf"
			printf "\n22) Your own database in sdf"
			printf "\nAfter that, please press [ENTER]. "
			printf "\nE.g. If you want to use the pre-filtered Chem-diverset.sdf library,"
			printf "\n     you should type \"1\". \n"
			read ligand 
			flag=3
			prep_ligands=$(echo "yes")
			libs=("AnalytiConDiscoveryNP.sdf" "ASINEX_BB_v123_SD.sdf" "ASINEXSynergy_Fragments.sdf" "Chem-diverset.sdf" "Chem-Fragment.sdf" "Chem-MW-Set-1.sdf" "ENAMINEBuilding_Blocks_reduced_price.sdf" "ENAMINEfragment_library.sdf" "IBScreenNP.sdf" "IndofineNaturalProducts.sdf" "MAybridge-Building_Blocks_GBP.sdf" "Maybridge-Fragment_Collection.sdf" "Maybridge_Pre-Fragment-COCl_PFP.sdf" "Maybridge_Pre-Fragment-NCO.sdf" "Maybridge_Pre-Fragment-SO2Cl.sdf" "Maybridge_Ro3_1000_Fragment_Library.sdf" "Maybridge_Ro3_500_Fragment_Library.sdf" "PrincetonNP.sdf" "SpecsNaturalProducts.sdf" "ZENOBIA_352fragments.sdf" "PTP_database.sdf" "Your own database in sdf")
			printf "\nYou have chosen to use ${libs[$ligand-1]}.\n\n"
		done
	fi
	if [[ $flag =~ ^1$|^2$ ]]
	then
		prefix="null"
		while [[ ( $flag == 1 && ! $prefix =~ ^[A-Z]+$ ) || ( $flag == 2 && ! $prefix == "" && ! $prefix =~ ^[A-Z]+$ ) ]]
		do
			printf "\nPlease choose a prefix for the code name of each ligand."
			printf "\nPlease take into account that the entry should be in capital letters."
			printf "\nE.g. You can type \"AD\"."
			printf "\nAfter that, please press [ENTER]"
			printf "\nIf your ligand file is a .smi or .can and it already has code"
			printf "\nnames, then please just press [ENTER]: \n"
			read prefix
		done
	fi
	while [[ ! $choice =~ ^[Dd][Ee][Ff][Aa][Uu][Ll][Tt]$|^[Nn][Oo]$|^([0-9]+.?,?)+$ ]]
	do
		printf "\nPlease choose whether you want to apply Lipinski rules or not. If not,"
		printf "\nplease type \"no\". Otherwhise, please type either \"default\" to choose"
		printf "\nMW<500, logP<5, HBD<5, HBA<10, TPSA<150, ROT_BONDS<8 or edit the values"
		printf "\nthat correspond to each property."
		printf "\nE.g. You can type \"550,5.3,4,11,140,7\" if you wanted to set"
		printf "\nMW<550, logP<5.3, HBD<4, HBA<11, TPSA<140, ROT_BONDS<7."
		printf "\nPlease take into account that, if you edit the numbers, no spaces among"
		printf "\nthem should be typed."
		printf "\nAfter that, please press [ENTER]: \n"
		read choice
	done
	while [[ ! $docking =~ ^[Aa][Dd]4$|^[Vv][Ii][Nn][Aa]$ ]]
	do
		printf "\n\nPlease choose whether you want to run Autodock4.2 or Vina."
		printf "\nPlease type \"AD4\" for Autodock4.2 or \"Vina\" for Autodock"
		printf "\nVina. After that, please press [ENTER]: \n"
		read docking
	done
	if [[ $flag =~ ^1$|^2$ ]]
	then
		printf "\n\nConverting the ligand file into a SDF file and saving it as"
		printf "\n$lig_dir/sdf/ligands.sdf.\n"
		obabel ${lig_dir%/*}/* -O $lig_dir/ligands.sdf
		mkdir $lig_dir/sdf
		mv $lig_dir/ligands.sdf $lig_dir/sdf
		if [[ $prefix == "" ]]
		then
			prefix="null"
		fi
		printf "\nAdding code names if necessary for each ligand in the"
		printf "\n$lig_dir/sdf/ligands.sdf."
		if [[ $flag == 1 ]]
		then
			python $path_other_files'to_sdf_correction.py' null $prefix $lig_dir/sdf
		fi
		if [[ ${posix##*.} =~ ^smi$ ]]
		then
			python $path_other_files'to_sdf_correction.py' ${lig_dir%/*}/*.smi $prefix $lig_dir/sdf	
		elif [[ ${posix##*.} =~ ^can$ ]]
		then
			python $path_other_files'to_sdf_correction.py' ${lig_dir%/*}/*.can $prefix $lig_dir/sdf
		fi
		printf "\n\nProducing canonical smiles and missing properties of the"
		printf "\n$lig_dir/sdf/ligands.sdf file and saving it as"
		printf "\n$lig_dir/sdf/properties_ligands.sdf.\n"
		obabel $lig_dir/sdf/ligands.sdf -O $lig_dir/sdf/properties_ligands.sdf -b --unique --add cansmi HBA2 HBD logP TPSA MW
	fi
	if [[ $ligand == "" && $flag == 3 ]]
	then
		printf "\n\nProducing canonical smiles and missing properties of the"
		printf "${lig_dir%/*}/* file and saving it as $lig_dir/sdf/properties_ligands.sdf.\n"
		obabel ${lig_dir%/*}/* -O $lig_dir/properties_ligands.sdf -b --unique --add cansmi HBA2 HBD logP TPSA MW
		mkdir $lig_dir/sdf
		mv $lig_dir/properties_ligands.sdf $lig_dir/sdf
	fi
	############MODIFICATION-5-5-15-SA-Adding new databases (16-21)##################################################################
	#if [[  $ligand =~ ^1$|^2$|^3$|^4$|^5$|^6$|^7$|^8$|^9$|^10$|^11$|^12$|^13$|^14$|^15$|^16$|^17$|^18$|^19$|^20$|^21$ && $flag == 3 ]]
	# 171117 - SAC - After updating for prefiltered 
	if [[  ! $prep_ligands && $ligand =~ ^1$|^2$|^3$|^4$|^5$|^6$|^7$|^8$|^9$|^10$|^11$|^12$|^13$|^14$|^15$|^16$|^17$|^18$|^19$|^20$|^21$ && $flag == 3 ]]
	##################################################################################################################################
	then
		printf "\n\nProducing canonical smiles and missing properties of the"
		printf $path_other_files"database_libraries/"${libs[$ligand-1]}" file and saving it as"
		printf "\n$lig_dir/sdf/properties_ligands.sdf. \n"
		obabel $path_other_files"database_libraries"/${libs[$ligand-1]} -O $lig_dir/properties_ligands.sdf -b --unique --add cansmi HBA2 HBD logP TPSA MW
		mkdir $lig_dir/sdf
		mv $lig_dir/properties_ligands.sdf $lig_dir/sdf
	fi
	##### IMPLEMENTATION-04/11/16-SA- Prepare the ligands only if you have not selected to use the pre-filtered ones ###############
	if [[ ! $prep_ligands ]]
	then
		printf "\n\nDeleting from the $lig_dir/sdf/properties_ligands.sdf"
		printf "\nthe atoms that are not recognised by Autodock and saving it as"
		printf "\n$lig_dir/sdf/del_atoms_properties_ligands.sdf.\n"
		python $path_other_files'atom_deletion.py' $lig_dir/sdf/properties_ligands.sdf $lig_dir/sdf/
		printf "\n\nProducing PDB ligand files with 3D coordinates that represent a"
		printf "\nconformer with the lowest structure and storing them as"
		printf "\n$lig_dir/pdb/ligand#.pdb"
		printf "\n\nRemoving original hydrogens.\n\n"
		mkdir $lig_dir/pdb
	####MODIFICATION-5/5/15-SA-Removing original hydrogens and removing the other files (adding "-d")########################
		obabel $lig_dir/sdf/del_atoms_properties_ligands.sdf -O $lig_dir/pdb/ligand.pdb -d --gen3d -m --conformer --nconf 50 --score energy
	#############################################################################################################################	
		printf "\n\nRenaming the $lig_dir/pdb/ligand#.pdb after their IDs."
		python $path_other_files"pdbs_rename.py" $lig_dir/"sdf/del_atoms_properties_ligands.sdf" $lig_dir/"pdb" $flag
		printf "\nAdding hydrogens in the $lig_dir/pdb/ID#.pdb files."
		printf "\nMerging charges and removing non-polar hydrogens."
		printf "\nSaving the ligands as $lig_dir/pdbqt/ID#.pdbqt."
		for f in $lig_dir/pdb/*
		do
			filename="${f%.*}"
			python $path_dock_files'/prepare_ligand4.py' -l $f -o $filename.pdbqt -A hydrogens -U nphs
		done
		mkdir $lig_dir/pdbqt
		mv $lig_dir/pdb/*.pdbqt $lig_dir/"pdbqt"
		echo $rep_dir >> "variables.txt"
		echo $lig_dir >> "variables.txt"
		echo $path_other_files >> "variables.txt"
		echo $path_dock_files >> "variables.txt"
		echo $receptor >> "variables.txt"
########MODIFICATION-SA-June15-Adding this variable in order to be able to run again the pipeline with new parameters##############
############################to create a corrupt output.txt and output.csv with the new results#####################################
		echo $flag >> "variables.txt"
###############################################################################################################################
	### IMPLEMENTATION-04/11/16-SA- Only if the libray with pre-filtered ligands has been selected ###
	elif [[ $prep_ligands ]]
	then
		mkdir $lig_dir/pdbqt
		mkdir $lig_dir/sdf
		#cp $path_prep_libaries/ligands/pdbqt/*.pdbqt $lig_dir/"pdbqt"
		#cp $path_prep_libaries/ligands/sdf/*.sdf $lig_dir/"sdf"
		cp $path_prep_libaries/pdbqt/*.pdbqt $lig_dir/"pdbqt"
		cp $path_prep_libaries/sdf/*.sdf $lig_dir/"sdf"
		echo $rep_dir >> "variables.txt"
		echo $lig_dir >> "variables.txt"
		echo $path_other_files >> "variables.txt"
		echo $path_dock_files >> "variables.txt"
		echo $receptor >> "variables.txt"
		echo $flag >> "variables.txt"
	fi
	###############################################
fi

## This block will be run everytime the grid box, parameters file, docking tool or application of RO5,
## edited RO5 or no RO5 is used
cnt=-1
while read line
do
	cnt=$(( cnt+1 ))
        lines[$cnt]=$line
done < variables.txt
## Variables that the user put in the beginning of the execution of the pipeline
rep_dir=${lines[0]}
lig_dir=${lines[1]}
path_other_files=${lines[2]}
path_dock_files=${lines[3]}
receptor=${lines[4]}
########MODIFICATION-SA-June15-Adding this variable in order to be able to run again the pipeline with new parameters##############
############################to create a corrupt output.txt and output.csv with the new results#####################################
flag=${lines[5]}
###################################################################################################################################
if [[ ! -n $counter ]]
then
	printf "\nPlease change the $rep_dir/sample.gpf file if you"
	printf "\nwant to change the grid box.\n"
	while [[ ! $choice =~ ^[Dd][Ee][Ff][Aa][Uu][Ll][Tt]$|^[Nn][Oo]$|^([0-9]+.?,?)+$ ]]
	do
		printf "\nPlease choose whether you want to apply Lipinski rules or not. If not,"
		printf "\nplease type \"no\". Otherwhise, please type either \"default\" to choose"
		printf "\nMW<500, logP<5, HBD<5, HBA<10, TPSA<150, ROT_BONDS<8 or edit the values"
		printf "\nthat correspond to each property."
		printf "\nE.g. You can type \"550,5.3,4,11,140,7\" if you wanted to set"
		printf "\nMW<550, logP<5.3, HBD<4, HBA<11, TPSA<140, ROT_BONDS<7."
		printf "\nPlease take into account that, if you edit the numbers, no spaces among"
		printf "\nthem should be typed."
		printf "\nAfter that, please press [ENTER]: \n"
       	read choice
	done
	while [[ ! $docking =~ ^[Aa][Dd]4$|^[Vv][Ii][Nn][Aa]$ ]]
	do
		printf "\n\nPlease choose whether you want to run Autodock4.2 or Vina."
		printf "\nPlease type \"AD4\" for Autodock4.2 or \"Vina\" for Autodock"
		printf "\nVina. After that, please press [ENTER]: \n"
       	read docking
	done
fi
while [[ ! $res_dir =~ ^[A-Za-z0-9_-]+$ ]]
do
	printf "\n\nPlease type a name for your results directory. Afer that, please"
	printf "\npress [ENTER]: \n"
       read res_dir
done
mkdir $res_dir
mkdir $res_dir/pdbqt_lip_rules
cp $lig_dir/pdbqt/* $res_dir/pdbqt_lip_rules
printf "\n\nCreating a datasheet that contains all the properties and the canonical"
printf "\nsmiles of each ligand and saving it as $res_dir/output.csv"
printf "\nand $res_dir/output.tsv."
python $path_other_files'datasheet.py' $lig_dir/sdf/del_atoms_properties_ligands.sdf $choice $res_dir $flag

if [[ $docking =~ ^[Aa][Dd]4$ ]]
then
	while [[ ! -f $rep_dir/sample.dpf ]]
	do
	echo ""
	###MODIFICATION-SA-Feb15-Generating dpf in receptor folder#################
	##Before: echo "Please modify if need be the" $path_other_files"sample.dpf")
	##Before: printf "file and save it in the directory $rep_dir."
	printf "\n\nCorrecting the sample.dpf file and saving it as $rep_dir/sample.dpf."
	python $path_other_files'generating_correct_dpf.py' $rep_dir/sample.gpf $path_other_files'scratch_sample.dpf' $rep_dir/ $receptor
	printf "\nPlease modify if need be the $rep_dir/sample.dpf."
	###########################################################################
	printf "\nThis file defines the different parameters for the genetic"
	printf "\nalgorithm and docking."
	printf "\nAfter that, please press [ENTER]: \n"
	read dpf
	done
	printf "\n\nAutodock 4.2 running."
	printf "\nThe grid boxes for each ligand are saved as $res_dir/gpf/ID.gpf."
	printf "\nThe autogrid output files are saved as $res_dir/glg/ID.glg."
	printf "\nThe parameter files for each ligand are saved as $res_dir/dpf/ID.dpf."
	printf "\nThe autodock output files are saved as $res_dir/dlg/ID/ID.dlg."
	chmod +x $path_other_files'autogrid4'
	chmod +x $path_other_files'autodock4'
	mkdir $res_dir/dlg
	#####MODIFICATION-SA-5-5-15-Generating the "etc" directory necessary and the docking.list file (JUST IN THE CLUSTER)## 
	#################################inside it######################################################
	#mkdir etc
	#python $path_other_files'creating_etc_dir.py' $lig_dir/pdb/ etc/
	###MODIFICATION-SA-16/4/15-Autogrid4 only for the sample.gpf##############
	#JUST GENERATING GRID MAPS FROM THE ORIGINAL SAMPLE.GPF IN THE DIRECTORY THAT THE MULTI-NODE VERSION CAN WORK: HOME DIR#
	cp $rep_dir/*.pdbqt . #Copying receptor.pdbqt to the home dir for the docking
	cp $rep_dir/sample.gpf . #Copying sample.gpf to the home dir for the docking
	$path_other_files'autogrid4' -p sample.gpf -l sample.glg
	##########################################
	for f in $res_dir/pdbqt_lip_rules/*pdbqt
	do
		printf "\n\nAutoDock 4.2. is analysing file ... $f\n"
		filename="${f%.*}"
		var1="${f##*/}"
		var2="${var1%.*}"
		python $path_dock_files'/prepare_gpf4.py' -l $f -r $rep_dir/${receptor%.*}.pdbqt -i $rep_dir/sample.gpf -o $filename.gpf
		python $path_dock_files'/prepare_dpf4.py' -l $f -r $rep_dir/${receptor%.*}.pdbqt -i $rep_dir/sample.dpf -o $filename.dpf
		python $path_other_files'dpf_rewrite.py' $filename $rep_dir/ $res_dir/pdbqt_lip_rules/
		##$path_other_files'autogrid4' -p $filename.gpf -l $filename.glg
		mkdir $res_dir/dlg/$var2
		$path_other_files'autodock4' -p $filename.dpf -l $res_dir/dlg/$var2/$var2.dlg
		printf "Analysis finished for file $f"
	done
	mkdir $res_dir/gpf
	mkdir $res_dir/dpf
	mkdir $res_dir/glg
	mv $res_dir/pdbqt_lip_rules/*.gpf $res_dir/gpf
	mv $res_dir/pdbqt_lip_rules/*.dpf $res_dir/dpf
	#mv $res_dir/pdbqt_lip_rules/*.glg $res_dir/glg
	mv *.glg $res_dir/glg
	printf "\n\nCreating summary files of the DLG files and saving them as"
	printf "\n$res_dir/summary/summary_ID.txt."
	printf "\nExtracting the lowest energy pdb file and saving it as"
	printf "\n$res_dir/lowest_energy_pdb/ID.pdb.\n"
	mkdir $res_dir/summary
	mkdir $res_dir/lowest_energy_pdb
	for f in $res_dir/dlg/*
	do
		filename="${f##*/}"
		python $path_dock_files'/summarize_results4.py' -d $f -b -o $res_dir/summary/summary_$filename.txt
		python $path_other_files'values_extraction_AD4.py' $res_dir/ $filename
	done
	for f in $res_dir/lowest_energy_pdb/*
        do
		obabel $f -O $f
	done
elif [[ $docking =~ ^[Vv][Ii][Nn][Aa]$ ]]
then
	printf "\n\nAutodock Vina running.\n\n"
	printf "\nDefining the config.txt files and save them as"
	printf "\n$res_dir/config_vina/config_ID.txt."
	printf "\nDefining the vina PDBQT files and save them as"
	printf "\n$res_dir/vina_pdbqt/ID_vina.pdbqt."
	printf "\nDefining the vina log files and save them as"
	printf "\n$res_dir/vina_log/log_ID.txt.\n\n"
	chmod +x $path_other_files'vina'
	chmod +x $path_other_files'vina_split'	
	mkdir $res_dir/config_vina
	mkdir $res_dir/vina_pdbqt
	mkdir $res_dir/vina_log
	for f in $res_dir/pdbqt_lip_rules/*pdbqt
	do
		filename="${f%.*}"
		b="$(python $path_other_files'vina_sample_blind.py' $rep_dir/sample.gpf $filename $rep_dir/${receptor%.*}.pdbqt $f $res_dir/config_vina/ $res_dir/vina_pdbqt/)"
		$path_other_files'vina' --config $res_dir/config_vina/config_$b.txt --log $res_dir/vina_log/log_$b.txt
	done
	mkdir $res_dir/lowest_energy_pdb
	for f in $res_dir/vina_log/*
	do
		filename="${f%.*}"
		var1="${filename##*_}"
		python $path_other_files'values_extraction_vina.py' $res_dir/ $var1
	done
	for f in $res_dir/lowest_energy_pdb/*
	do
		obabel $f -O $f
	done
fi
ch_fil='null'
printf "\nOrdering the $res_dir/output.csv and"
printf "\n$res_dir/output.tsv by DG in descending order.\n\n"
mkdir $res_dir/'filtered_results'
python $path_other_files'filtering.py' $res_dir/ 8 $ch_fil 0 $res_dir/'filtered_results'
printf "\n\nVSpipe has finished to filter the results of the virtual screening.\n"
printf "\nThank you for using VSpipe !!\n"
